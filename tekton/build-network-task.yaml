#
# SPDX-License-Identifier: Apache-2.0
#
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-network-task
spec:
  params:
    - name: ibp-creds
      type: string
      description: name of the secret holding the github-token
      default: ibp-creds
    - name: ordering-org-vars
      type: string
      description: Name of ConfigMap with organisation vars for the Ordering Orgs
    - name: endorse-org-vars
      type: string
      description: Name of ConfigMap with organisation vars for the Endorsing Orgs

  volumes:
    - name: ansible-config-ordering-vol
      configMap:
        name: $(params.ordering-org-vars)
    - name: ansible-config-endorsing-vol
      configMap:
        name: $(params.endorse-org-vars)
    - name: ansible-templates-vol
      configMap:
        name: templates
  workspaces:
    - name: ansiblectx
      description: 
      mountPath: /playbooks/output
  steps:
    - name: createorderingorg
      image: ibmcom/ibp-ansible
      env:
        - name: IBP_ANSIBLE_LOG_FILENAME
          value: /playbooks/output/build-network-task.log
        - name: IBP_API_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: $(params.ibp-creds)
              key: api_endpoint
        - name: IBP_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.ibp-creds)
              key: api_key              
      volumeMounts:
        - name: ansible-config-ordering-vol
          mountPath: /playbooks/env
          readOnly: true

      script: |
          #!/usr/bin/env -vS ansible-playbook -v
          ---
          - name: Create components for an ordering organization
            hosts: localhost
            vars:
              api_endpoint: "{{ lookup('ansible.builtin.env', 'IBP_API_ENDPOINT') }}"
              api_key: "{{ lookup('ansible.builtin.env', 'IBP_API_KEY') }}"
              api_authtype: ibmcloud
              state: present
              organization_name: "{{ ordering_org_name }}"
              organization_msp_id: "{{ ordering_service_msp }}"
              wallet: /playbooks/output
            vars_files:
               - /playbooks/env/common-vars.yml
               - /playbooks/env/org-vars.yml
            roles:
              - ibm.blockchain_platform.ordering_organization   

    - name: createendorsingorg
      image: ibmcom/ibp-ansible
      env:
        - name: IBP_ANSIBLE_LOG_FILENAME
          value: /playbooks/output/build-network-task.log
        - name: IBP_API_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: $(params.ibp-creds)
              key: api_endpoint
        - name: IBP_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.ibp-creds)
              key: api_key              
      volumeMounts:
        - name: ansible-config-endorsing-vol
          mountPath: /playbooks/env
          readOnly: true

      script: |
          #!/usr/bin/env -vS ansible-playbook -v
          ---
          - name: Create components for an ordering organization
            hosts: localhost
            vars:
              api_endpoint: "{{ lookup('ansible.builtin.env', 'IBP_API_ENDPOINT') }}"
              api_key: "{{ lookup('ansible.builtin.env', 'IBP_API_KEY') }}"
              api_authtype: ibmcloud
              state: present
              organization_name: "{{ org1_name }}"
              organization_msp_id: "{{ org1_msp_id }}"
              ca_name: "{{ org1_ca_name }}"
              peer_name: "{{ org1_peer_name }}"
              wallet: /playbooks/output
            vars_files:
               - /playbooks/env/common-vars.yml
               - /playbooks/env/org-vars.yml
            roles:
              - ibm.blockchain_platform.endorsing_organization             

    - name: enablecapabilities
      image: ibmcom/ibp-ansible
      env:
        - name: IBP_ANSIBLE_LOG_FILENAME
          value: /playbooks/output/build-network-task.log
        - name: IBP_API_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: $(params.ibp-creds)
              key: api_endpoint
        - name: IBP_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.ibp-creds)
              key: api_key              
      volumeMounts:
        - name: ansible-config-ordering-vol
          mountPath: /playbooks/env
          readOnly: true

      script: |
          #!/usr/bin/env -vS ansible-playbook -v
          ---
          - name: Enable Fabric v2.x capabilities
            hosts: localhost
            vars:
              api_endpoint: "{{ lookup('ansible.builtin.env', 'IBP_API_ENDPOINT') }}"
              api_key: "{{ lookup('ansible.builtin.env', 'IBP_API_KEY') }}"
              api_authtype: ibmcloud
              rootdir: /playbooks/output
              wallet: /playbooks/output
            vars_files:
               - /playbooks/env/common-vars.yml
               - /playbooks/env/org-vars.yml
            tasks:
              - name: Get the ordering service information
                ibm.blockchain_platform.ordering_service_info:
                  api_endpoint: "{{ api_endpoint }}"
                  api_authtype: "{{ api_authtype }}"
                  api_key: "{{ api_key }}"
                  api_secret: "{{ api_secret | default(omit) }}"
                  api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
                  name: "{{ ordering_service_name }}"
                register: ordering_service

              - name: Fail if the ordering service does not exist
                fail:
                  msg: "{{ ordering_service_name }} does not exist"
                when: not ordering_service.exists

              - name: Fetch the system channel configuration
                ibm.blockchain_platform.channel_config:
                  api_endpoint: "{{ api_endpoint }}"
                  api_authtype: "{{ api_authtype }}"
                  api_key: "{{ api_key }}"
                  api_secret: "{{ api_secret | default(omit) }}"
                  api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
                  ordering_service: "{{ ordering_service_name }}"
                  identity: "{{ rootdir}}/{{ ordering_org_name }} Admin.json"
                  msp_id: "{{ ordering_service_msp }}"
                  operation: fetch
                  name: "{{ ordering_service.ordering_service[0].system_channel_id }}"
                  path: "{{ rootdir}}/original_config.bin"

              - name: Create a copy of the system channel configuration
                copy:
                  src: "{{ rootdir }}/original_config.bin"
                  dest: "{{ rootdir }}/updated_config.bin"

              - name: Enable Fabric v2.x capabilities
                ibm.blockchain_platform.channel_capabilities:
                  path: "{{rootdir}}/updated_config.bin"
                  channel: V2_0
                  orderer: V2_0

              - name: Compute the system channel configuration update
                ibm.blockchain_platform.channel_config:
                  operation: compute_update
                  name: "{{ ordering_service.ordering_service[0].system_channel_id }}"
                  original: "{{rootdir}}/original_config.bin"
                  updated: "{{rootdir}}/updated_config.bin"
                  path: "{{rootdir}}/config_update.bin"
                register: compute_update

              - name: Sign the system channel configuration update
                ibm.blockchain_platform.channel_config:
                  operation: sign_update
                  identity: "{{ rootdir}}/{{ ordering_org_name }} Admin.json"
                  msp_id: "{{ ordering_service_msp }}"
                  name: "{{ ordering_service.ordering_service[0].system_channel_id }}"
                  path: "{{rootdir}}/config_update.bin"
                when: compute_update.path

              - name: Apply the system channel configuration update
                ibm.blockchain_platform.channel_config:
                  api_endpoint: "{{ api_endpoint }}"
                  api_authtype: "{{ api_authtype }}"
                  api_key: "{{ api_key }}"
                  api_secret: "{{ api_secret | default(omit) }}"
                  api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
                  operation: apply_update
                  ordering_service: "{{ ordering_service_name }}"
                  identity: "{{ rootdir}}/{{ ordering_org_name }} Admin.json"
                  msp_id: "{{ ordering_service_msp }}"
                  name: "{{ ordering_service.ordering_service[0].system_channel_id }}"
                  path: "{{rootdir}}/config_update.bin"
                when: compute_update.path


    - name: addorgtoconstirum
      image: ibmcom/ibp-ansible
      env:
        - name: IBP_ANSIBLE_LOG_FILENAME
          value: /playbooks/output/build-network-task.log
        - name: IBP_API_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: $(params.ibp-creds)
              key: api_endpoint
        - name: IBP_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.ibp-creds)
              key: api_key              
      volumeMounts:
        - name: ansible-config-ordering-vol
          mountPath: /playbooks/env
          readOnly: true

      script: |
        #!/usr/bin/env -vS ansible-playbook -v
        ---
        - name: Add the organization to the consortium
          hosts: localhost
          vars:
            api_endpoint: "{{ lookup('ansible.builtin.env', 'IBP_API_ENDPOINT') }}"
            api_key: "{{ lookup('ansible.builtin.env', 'IBP_API_KEY') }}"
            api_authtype: ibmcloud
            rootdir: /playbooks/output
            wallet: /playbooks/output
          vars_files:
              - /playbooks/env/common-vars.yml
              - /playbooks/env/org-vars.yml
          tasks:
            - name: Get the ordering service information
              ibm.blockchain_platform.ordering_service_info:
                api_endpoint: "{{ api_endpoint }}"
                api_authtype: "{{ api_authtype }}"
                api_key: "{{ api_key }}"
                api_secret: "{{ api_secret | default(omit) }}"
                api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
                name: "{{ ordering_service_name }}"
              register: ordering_service

            - name: Fail if the ordering service does not exist
              fail:
                msg: "{{ ordering_service_name }} does not exist"
              when: not ordering_service.exists

            - name: Fetch the system channel configuration
              ibm.blockchain_platform.channel_config:
                api_endpoint: "{{ api_endpoint }}"
                api_authtype: "{{ api_authtype }}"
                api_key: "{{ api_key }}"
                api_secret: "{{ api_secret | default(omit) }}"
                api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
                ordering_service: "{{ ordering_service_name }}"
                identity: "{{rootdir}}/{{ ordering_org_name }} Admin.json"
                msp_id: "{{ ordering_service_msp }}"
                operation: fetch
                name: "{{ ordering_service.ordering_service[0].system_channel_id }}"
                path: "{{rootdir}}/original_config.bin"

            - name: Create a copy of the system channel configuration
              copy:
                src: "{{rootdir}}/original_config.bin"
                dest: "{{rootdir}}/updated_config.bin"

            - name: Add the organization to the consortium
              ibm.blockchain_platform.consortium_member:
                state: present
                api_endpoint: "{{ api_endpoint }}"
                api_authtype: "{{ api_authtype }}"
                api_key: "{{ api_key }}"
                api_secret: "{{ api_secret | default(omit) }}"
                api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
                organization: "{{ org1_name }}"
                path: "{{rootdir}}/updated_config.bin"

            - name: Compute the system channel configuration update
              ibm.blockchain_platform.channel_config:
                operation: compute_update
                name: "{{ ordering_service.ordering_service[0].system_channel_id }}"
                original: "{{rootdir}}/original_config.bin"
                updated: "{{rootdir}}/updated_config.bin"
                path: "{{rootdir}}/config_update.bin"
              register: compute_update

            - name: Sign the system channel configuration update
              ibm.blockchain_platform.channel_config:
                operation: sign_update
                identity: "{{rootdir}}/{{ ordering_org_name }} Admin.json"
                msp_id: "{{ ordering_service_msp }}"
                name: "{{ ordering_service.ordering_service[0].system_channel_id }}"
                path: "{{rootdir}}/config_update.bin"
              when: compute_update.path

            - name: Apply the system channel configuration update
              ibm.blockchain_platform.channel_config:
                api_endpoint: "{{ api_endpoint }}"
                api_authtype: "{{ api_authtype }}"
                api_key: "{{ api_key }}"
                api_secret: "{{ api_secret | default(omit) }}"
                api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
                operation: apply_update
                ordering_service: "{{ ordering_service_name }}"
                identity: "{{rootdir}}/{{ ordering_org_name }} Admin.json"
                msp_id: "{{ ordering_service_msp }}"
                name: "{{ ordering_service.ordering_service[0].system_channel_id }}"
                path: "{{rootdir}}/config_update.bin"
              when: compute_update.path

    - name: createchannel
      image: ibmcom/ibp-ansible
      env:
        - name: IBP_ANSIBLE_LOG_FILENAME
          value: /playbooks/output/build-network-task.log
        - name: IBP_API_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: $(params.ibp-creds)
              key: api_endpoint
        - name: IBP_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.ibp-creds)
              key: api_key              
      volumeMounts:
        - name: ansible-config-endorsing-vol
          mountPath: /playbooks/env
          readOnly: true
        - name: ansible-templates-vol
          mountPath: /playbooks/templates
          readOnly: true          
      script: |
        #!/usr/bin/env -vS ansible-playbook -v
        ---
        - name: Create the channel
          hosts: localhost
          vars:
            api_endpoint: "{{ lookup('ansible.builtin.env', 'IBP_API_ENDPOINT') }}"
            api_key: "{{ lookup('ansible.builtin.env', 'IBP_API_KEY') }}"
            api_authtype: ibmcloud
            rootdir: /playbooks/output
            wallet: /playbooks/output
          vars_files:
              - /playbooks/env/common-vars.yml
              - /playbooks/env/org-vars.yml
          tasks:
            - name: Check to see if the channel already exists
              ibm.blockchain_platform.channel_block:
                api_endpoint: "{{ api_endpoint }}"
                api_authtype: "{{ api_authtype }}"
                api_key: "{{ api_key }}"
                api_secret: "{{ api_secret | default(omit) }}"
                api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
                operation: fetch
                ordering_service: "{{ ordering_service_name }}"
                identity: "{{rootdir}}/{{ org1_name }} Admin.json"
                msp_id: "{{ org1_msp_id }}"
                name: "{{ channel_name }}"
                target: "0"
                path: "{{rootdir}}/channel_genesis_block.bin"
              failed_when: False
              register: result

            - name: Fail on any error other than the channel not existing
              fail:
                msg: "{{ result.msg }}"
              when: result.msg is defined and 'NOT_FOUND' not in result.msg

            - name: Create the configuration update for the new channel
              ibm.blockchain_platform.channel_config:
                api_endpoint: "{{ api_endpoint }}"
                api_authtype: "{{ api_authtype }}"
                api_key: "{{ api_key }}"
                api_secret: "{{ api_secret | default(omit) }}"
                api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
                operation: create
                name: "{{ channel_name }}"
                path: "{{rootdir}}/config_update.bin"
                organizations:
                  - "{{ org1_name }}"
                policies:
                  Admins: "{{ lookup('template', '/playbooks/templates/09-admins-policy.json.j2') }}"
                  Readers: "{{ lookup('template', '/playbooks/templates/09-readers-policy.json.j2') }}"
                  Writers: "{{ lookup('template', '/playbooks/templates/09-writers-policy.json.j2') }}"
                  Endorsement: "{{ lookup('template', '/playbooks/templates/09-endorsement-policy.json.j2') }}"
                  LifecycleEndorsement: "{{ lookup('template', '/playbooks/templates/09-lifecycle-endorsement-policy.json.j2') }}"
                capabilities:
                  application: V2_0
              when: result.msg is defined and 'NOT_FOUND' in result.msg

            - name: Sign the channel configuration update for the new channel
              ibm.blockchain_platform.channel_config:
                operation: sign_update
                identity: "{{rootdir}}/{{ org1_name }} Admin.json"
                msp_id: "{{ org1_msp_id }}"
                name: "{{ channel_name }}"
                path: "{{rootdir}}/config_update.bin"
              when: result.msg is defined and 'NOT_FOUND' in result.msg

            - name: Apply the channel configuration update for the new channel
              ibm.blockchain_platform.channel_config:
                api_endpoint: "{{ api_endpoint }}"
                api_authtype: "{{ api_authtype }}"
                api_key: "{{ api_key }}"
                api_secret: "{{ api_secret | default(omit) }}"
                api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
                operation: apply_update
                ordering_service: "{{ ordering_service_name }}"
                identity: "{{rootdir}}/{{ org1_name }} Admin.json"
                msp_id: "{{ org1_msp_id }}"
                name: "{{ channel_name }}"
                path: "{{rootdir}}/config_update.bin"
              when: result.msg is defined and 'NOT_FOUND' in result.msg

    - name: joinpeertochannel
      image: ibmcom/ibp-ansible
      env:
        - name: IBP_ANSIBLE_LOG_FILENAME
          value: /playbooks/output/build-network-task.log
        - name: IBP_API_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: $(params.ibp-creds)
              key: api_endpoint
        - name: IBP_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.ibp-creds)
              key: api_key              
      volumeMounts:
        - name: ansible-config-endorsing-vol
          mountPath: /playbooks/env
          readOnly: true
      script: |
        #!/usr/bin/env -vS ansible-playbook -v
        ---
        - name: Join peer to channel
          hosts: localhost
          vars:
            api_endpoint: "{{ lookup('ansible.builtin.env', 'IBP_API_ENDPOINT') }}"
            api_key: "{{ lookup('ansible.builtin.env', 'IBP_API_KEY') }}"
            api_authtype: ibmcloud
            rootdir: /playbooks/output
            wallet: /playbooks/output
          vars_files:
              - /playbooks/env/common-vars.yml
              - /playbooks/env/org-vars.yml
          tasks:
            - name: Fetch the genesis block for the channel
              ibm.blockchain_platform.channel_block:
                api_endpoint: "{{ api_endpoint }}"
                api_authtype: "{{ api_authtype }}"
                api_key: "{{ api_key }}"
                api_secret: "{{ api_secret | default(omit) }}"
                api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
                operation: fetch
                ordering_service: "{{ ordering_service_name }}"
                identity: "{{rootdir}}/{{ org1_name }} Admin.json"
                msp_id: "{{ org1_msp_id }}"
                name: "{{ channel_name }}"
                target: "0"
                path: "{{rootdir}}/channel_genesis_block.bin"

            - name: Join the peer to the channel
              ibm.blockchain_platform.peer_channel:
                api_endpoint: "{{ api_endpoint }}"
                api_authtype: "{{ api_authtype }}"
                api_key: "{{ api_key }}"
                api_secret: "{{ api_secret | default(omit) }}"
                api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
                operation: join
                peer: "{{ org1_peer_name }}"
                identity: "{{rootdir}}/{{ org1_name }} Admin.json"
                msp_id: "{{ org1_msp_id }}"
                path: "{{rootdir}}/channel_genesis_block.bin"

    - name: addanchorpeer
      image: ibmcom/ibp-ansible
      env:
        - name: IBP_ANSIBLE_LOG_FILENAME
          value: /playbooks/output/build-network-task.log
        - name: IBP_API_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: $(params.ibp-creds)
              key: api_endpoint
        - name: IBP_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.ibp-creds)
              key: api_key              
      volumeMounts:
        - name: ansible-config-endorsing-vol
          mountPath: /playbooks/env
          readOnly: true
      script: |
        #!/usr/bin/env -vS ansible-playbook -v
        ---
        - name: Add Anchor Peer
          hosts: localhost
          vars:
            api_endpoint: "{{ lookup('ansible.builtin.env', 'IBP_API_ENDPOINT') }}"
            api_key: "{{ lookup('ansible.builtin.env', 'IBP_API_KEY') }}"
            api_authtype: ibmcloud
            rootdir: /playbooks/output
            wallet: /playbooks/output
          vars_files:
              - /playbooks/env/common-vars.yml
              - /playbooks/env/org-vars.yml
          tasks:
            - name: Get the ordering service information
              ibm.blockchain_platform.ordering_service_info:
                api_endpoint: "{{ api_endpoint }}"
                api_authtype: "{{ api_authtype }}"
                api_key: "{{ api_key }}"
                api_secret: "{{ api_secret | default(omit) }}"
                api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
                name: "{{ ordering_service_name }}"
              register: ordering_service

            - name: Fail if the ordering service does not exist
              fail:
                msg: "{{ ordering_service_name }} does not exist"
              when: not ordering_service.exists

            - name: Fetch the channel configuration
              ibm.blockchain_platform.channel_config:
                api_endpoint: "{{ api_endpoint }}"
                api_authtype: "{{ api_authtype }}"
                api_key: "{{ api_key }}"
                api_secret: "{{ api_secret | default(omit) }}"
                api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
                ordering_service: "{{ ordering_service_name }}"
                identity: "{{rootdir}}/{{ org1_name }} Admin.json"
                msp_id: "{{ org1_msp_id }}"
                operation: fetch
                name: "{{ channel_name }}"
                path: "{{rootdir}}/original_config.bin"

            - name: Create a copy of the channel configuration
              copy:
                src: "{{rootdir}}/original_config.bin"
                dest: "{{rootdir}}/updated_config.bin"

            - name: Update the organization
              ibm.blockchain_platform.channel_member:
                state: present
                api_endpoint: "{{ api_endpoint }}"
                api_authtype: "{{ api_authtype }}"
                api_key: "{{ api_key }}"
                api_secret: "{{ api_secret | default(omit) }}"
                api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
                organization: "{{ org1_name }}"
                anchor_peers:
                  - "{{ org1_peer_name }}"
                path: "{{rootdir}}/updated_config.bin"

            - name: Compute the channel configuration update
              ibm.blockchain_platform.channel_config:
                operation: compute_update
                name: "{{ channel_name }}"
                original: "{{rootdir}}/original_config.bin"
                updated: "{{rootdir}}/updated_config.bin"
                path: "{{rootdir}}/config_update.bin"
              register: compute_update

            - name: Sign the channel configuration update
              ibm.blockchain_platform.channel_config:
                operation: sign_update
                identity: "{{rootdir}}/{{ org1_name }} Admin.json"
                msp_id: "{{ org1_msp_id }}"
                name: "{{ channel_name }}"
                path: "{{rootdir}}/config_update.bin"
              when: compute_update.path

            - name: Apply the channel configuration update
              ibm.blockchain_platform.channel_config:
                api_endpoint: "{{ api_endpoint }}"
                api_authtype: "{{ api_authtype }}"
                api_key: "{{ api_key }}"
                api_secret: "{{ api_secret | default(omit) }}"
                api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
                operation: apply_update
                ordering_service: "{{ ordering_service_name }}"
                identity: "{{rootdir}}/{{ org1_name }} Admin.json"
                msp_id: "{{ org1_msp_id }}"
                name: "{{ channel_name }}"
                path: "{{rootdir}}/config_update.bin"
              when: compute_update.path

